memcpy:
.L0:
	<entry-point>
	ptrcast.64* %r2(dst8) <- (64) %arg1
	ptrcast.64* %r4(src8) <- (64) %arg2
	phisrc.32   %phi2(count) <- %arg3
	phisrc.64*  %phi4(dst8) <- %r2(dst8)
	phisrc.64*  %phi6(src8) <- %r4(src8)
	br          .L4

.L4:
	phi.32      %r5 <- %phi2(count), %phi3(count)
	add.32      %r6 <- %r5, $-1
	setgt.32    %r7 <- %r5, $0
	phisrc.32   %phi3(count) <- %r6
	br          %r7, .L1, .L5

.L1:
	phi.64*     %r8 <- %phi6(src8), %phi7(src8)
	add.64*     %r9 <- %r8, $1
	load.8      %r10 <- 0[%r8]
	phi.64*     %r11 <- %phi4(dst8), %phi5(dst8)
	add.64*     %r12 <- %r11, $1
	store.8     %r10 -> 0[%r11]
	phisrc.64*  %phi5(dst8) <- %r12
	phisrc.64*  %phi7(src8) <- %r9
	br          .L4

.L5:
	ret.64*     %arg1


new_allocator:
.L6:
	<entry-point>
	muls.32     %r17 <- %arg1, %arg2
	scast.64    %r18 <- (32) %r17
	seta.32     %r19 <- %r18, $0x10000
	br          %r19, .L7, .L8

.L7:
	symaddr.64* %r20 <- <anon symbol:000001BC69DE4A88>
	push.64*    %r20
	call.32     %r21 <- printf
	push.32     $1
	call        exit
	br          .L8

.L8:
	symaddr.64* %r22 <- A
	store.64*   $0 -> 0[A]
	store.64*   $0 -> 8[A]
	store.64*   $0 -> 16[A]
	store.64*   $0 -> 24[A]
	store.32    %arg1 -> 32[A]
	store.32    %arg2 -> 36[A]
	ret.64*     %r22


grow_allocator:
.L10:
	<entry-point>
	load.32     %r33 <- 0[once]
	br          %r33, .L11, .L12

.L11:
	symaddr.64* %r34 <- <anon symbol:000001BC69DE5A48>
	push.64*    %r34
	call.32     %r35 <- printf
	push.32     $1
	call        exit
	br          .L13

.L12:
	store.32    $1 -> 0[once]
	br          .L13

.L13:
	symaddr.64* %r36 <- Node
	symaddr.64* %r37 <- Memory
	store.64*   %r37 -> 8[Node]
	load.64*    %r40 <- 0[%arg1]
	store.64*   %r40 -> 0[Node]
	store.64*   %r36 -> 0[%arg1]
	load.64*    %r46 <- 8[Node]
	store.64*   %r46 -> 16[%arg1]
	load.32     %r51 <- 32[%arg1]
	load.32     %r53 <- 36[%arg1]
	muls.32     %r54 <- %r51, %r53
	scast.64    %r55 <- (32) %r54
	add.64*     %r56 <- %r46, %r55
	store.64*   %r56 -> 24[%arg1]
	ret


alloc_node:
.L15:
	<entry-point>
	load.64*    %r59 <- 8[%arg1]
	br          %r59, .L16, .L17

.L16:
	load.64*    %r64 <- 0[%r59]
	ptrcast.64* %r65 <- (64) %r64
	store.64*   %r65 -> 8[%arg1]
	cast.64*    %r68 <- (64) %r59
	phisrc.64*  %phi9(return) <- %r68
	br          .L18

.L17:
	load.64*    %r71 <- 16[%arg1]
	load.64*    %r73 <- 24[%arg1]
	seteq.32    %r74 <- %r71, %r73
	phisrc.64*  %phi11 <- %r71
	br          %r74, .L20, .L21

.L20:
	push.64*    %arg1
	call        grow_allocator
	br          .L21

.L21:
	load.64*    %r77 <- 16[%arg1]
	cast.64*    %r78 <- (64) %r77
	load.32     %r80 <- 32[%arg1]
	scast.64    %r81 <- (32) %r80
	cast.64     %r84 <- (64) %r77
	add.64      %r85 <- %r84, %r81
	ptrcast.64* %r86 <- (64) %r85
	store.64*   %r86 -> 16[%arg1]
	phisrc.64*  %phi10(return) <- %r78
	br          .L18

.L18:
	phi.64*     %r69 <- %phi9(return), %phi10(return)
	ret.64*     %r69


dealloc_node:
.L22:
	<entry-point>
	load.64*    %r89 <- 8[%arg1]
	ptrcast.64* %r91 <- (64) %arg2
	store.64*   %r89 -> 0[%r91]
	store.64*   %r91 -> 8[%arg1]
	ret


destroy_allocator:
.L24:
	<entry-point>
	ret


AVL_SetRight:
.L26:
	<entry-point>
	store.64*   %arg2 -> 16[%arg1]
	br          %arg2, .L27, .L28

.L27:
	store.64*   %arg1 -> 0[%arg2]
	br          .L28

.L28:
	ret


AVL_SetLeft:
.L29:
	<entry-point>
	store.64*   %arg2 -> 8[%arg1]
	br          %arg2, .L30, .L31

.L30:
	store.64*   %arg1 -> 0[%arg2]
	br          .L31

.L31:
	ret


AVL_RotateLeft:
.L32:
	<entry-point>
	load.64*    %r106 <- 16[%arg1]
	load.64*    %r108 <- 0[%arg1]
	br          %r108, .L33, .L34

.L33:
	load.64*    %r113 <- 8[%r108]
	seteq.32    %r114 <- %arg1, %r113
	br          %r114, .L35, .L36

.L35:
	push.64*    %r108
	push.64*    %r106
	call        AVL_SetLeft
	br          .L38

.L36:
	push.64*    %r108
	push.64*    %r106
	call        AVL_SetRight
	br          .L38

.L34:
	store.64*   $0 -> 0[%r106]
	br          .L38

.L38:
	push.64*    %arg1
	load.64*    %r124 <- 8[%r106]
	push.64*    %r124
	call        AVL_SetRight
	push.64*    %r106
	push.64*    %arg1
	call        AVL_SetLeft
	ret.64*     %r106


AVL_RotateRight:
.L40:
	<entry-point>
	load.64*    %r130 <- 8[%arg1]
	load.64*    %r132 <- 0[%arg1]
	br          %r132, .L41, .L42

.L41:
	load.64*    %r137 <- 8[%r132]
	seteq.32    %r138 <- %arg1, %r137
	br          %r138, .L43, .L44

.L43:
	push.64*    %r132
	push.64*    %r130
	call        AVL_SetLeft
	br          .L46

.L44:
	push.64*    %r132
	push.64*    %r130
	call        AVL_SetRight
	br          .L46

.L42:
	store.64*   $0 -> 0[%r130]
	br          .L46

.L46:
	push.64*    %arg1
	load.64*    %r148 <- 16[%r130]
	push.64*    %r148
	call        AVL_SetLeft
	push.64*    %r130
	push.64*    %arg1
	call        AVL_SetRight
	ret.64*     %r130


AVL_DoubleRotateRight:
.L48:
	<entry-point>
	load.64*    %r154 <- 8[%arg1]
	load.64*    %r156 <- 16[%r154]
	load.32     %r158 <- 24[%r156]
	switch      %r158, 0 -> .L51, 1 -> .L52, 2 -> .L50, default -> .L49

.L50:
	store.32    $0 -> 24[%arg1]
	store.32    $1 -> 24[%r154]
	br          .L49

.L51:
	store.32    $0 -> 24[%r154]
	store.32    $0 -> 24[%arg1]
	br          .L49

.L52:
	store.32    $2 -> 24[%arg1]
	store.32    $0 -> 24[%r154]
	br          .L49

.L49:
	store.32    $0 -> 24[%r156]
	push.64*    %arg1
	push.64*    %r154
	call.64*    %r168 <- AVL_RotateLeft
	push.64*    %r168
	call        AVL_SetLeft
	push.64*    %arg1
	call.64*    %r170 <- AVL_RotateRight
	ret.64*     %r170


AVL_DoubleRotateLeft:
.L54:
	<entry-point>
	load.64*    %r174 <- 16[%arg1]
	load.64*    %r176 <- 8[%r174]
	load.32     %r178 <- 24[%r176]
	switch      %r178, 0 -> .L57, 1 -> .L58, 2 -> .L56, default -> .L55

.L56:
	store.32    $1 -> 24[%arg1]
	store.32    $0 -> 24[%r174]
	br          .L55

.L57:
	store.32    $0 -> 24[%r174]
	store.32    $0 -> 24[%arg1]
	br          .L55

.L58:
	store.32    $0 -> 24[%arg1]
	store.32    $2 -> 24[%r174]
	br          .L55

.L55:
	store.32    $0 -> 24[%r176]
	push.64*    %arg1
	push.64*    %r174
	call.64*    %r188 <- AVL_RotateRight
	push.64*    %r188
	call        AVL_SetRight
	push.64*    %arg1
	call.64*    %r190 <- AVL_RotateLeft
	ret.64*     %r190


AVL_RebalanceHeavierLeft:
.L60:
	<entry-point>
	load.32     %r195 <- 24[%arg1]
	phisrc.64*  %phi28(root) <- %arg1
	switch      %r195, 0 -> .L63, 1 -> .L64, 2 -> .L62, default -> .L61

.L62:
	store.32    $0 -> 24[%arg1]
	store.32    $0 -> 0[%arg2]
	phisrc.64*  %phi24(root) <- %arg1
	br          .L61

.L63:
	store.32    $1 -> 24[%arg1]
	phisrc.64*  %phi25(root) <- %arg1
	br          .L61

.L64:
	load.64*    %r200 <- 8[%arg1]
	load.32     %r202 <- 24[%r200]
	switch      %r202, 1 -> .L66, 2 -> .L67, default -> .L65

.L66:
	store.32    $0 -> 24[%arg1]
	store.32    $0 -> 24[%r200]
	push.64*    %arg1
	call.64*    %r206 <- AVL_RotateRight
	phisrc.64*  %phi26(root) <- %r206
	br          .L65

.L67:
	push.64*    %arg1
	call.64*    %r208 <- AVL_DoubleRotateRight
	phisrc.64*  %phi27(root) <- %r208
	br          .L65

.L65:
	store.32    $0 -> 0[%arg2]
	br          .L61

.L61:
	phi.64*     %r210 <- %phi24(root), %phi25(root), %phi26(root), %phi27(root), %phi28(root)
	ret.64*     %r210


AVL_RebalanceHeavierRight:
.L69:
	<entry-point>
	load.32     %r214 <- 24[%arg1]
	phisrc.64*  %phi36(root) <- %arg1
	switch      %r214, 0 -> .L72, 1 -> .L71, 2 -> .L73, default -> .L70

.L71:
	store.32    $0 -> 24[%arg1]
	store.32    $0 -> 0[%arg2]
	phisrc.64*  %phi32(root) <- %arg1
	br          .L70

.L72:
	store.32    $2 -> 24[%arg1]
	phisrc.64*  %phi33(root) <- %arg1
	br          .L70

.L73:
	load.64*    %r219 <- 16[%arg1]
	load.32     %r221 <- 24[%r219]
	switch      %r221, 1 -> .L76, 2 -> .L75, default -> .L74

.L75:
	store.32    $0 -> 24[%arg1]
	store.32    $0 -> 24[%r219]
	push.64*    %arg1
	call.64*    %r225 <- AVL_RotateLeft
	phisrc.64*  %phi34(root) <- %r225
	br          .L74

.L76:
	push.64*    %arg1
	call.64*    %r227 <- AVL_DoubleRotateLeft
	phisrc.64*  %phi35(root) <- %r227
	br          .L74

.L74:
	store.32    $0 -> 0[%arg2]
	br          .L70

.L70:
	phi.64*     %r229 <- %phi32(root), %phi33(root), %phi34(root), %phi35(root), %phi36(root)
	ret.64*     %r229


AVL_RebalanceShorterLeft:
.L78:
	<entry-point>
	load.32     %r233 <- 24[%arg1]
	phisrc.64*  %phi46(p) <- %arg1
	switch      %r233, 0 -> .L80, 1 -> .L81, 2 -> .L82, default -> .L79

.L80:
	store.32    $2 -> 24[%arg1]
	store.32    $0 -> 0[%arg2]
	phisrc.64*  %phi40(p) <- %arg1
	br          .L79

.L81:
	store.32    $0 -> 24[%arg1]
	phisrc.64*  %phi41(p) <- %arg1
	br          .L79

.L82:
	load.64*    %r238 <- 16[%arg1]
	load.32     %r240 <- 24[%r238]
	phisrc.64*  %phi45(p) <- %arg1
	switch      %r240, 0 -> .L84, 1 -> .L86, 2 -> .L85, default -> .L79

.L84:
	store.32    $0 -> 0[%arg2]
	store.32    $1 -> 24[%r238]
	push.64*    %arg1
	call.64*    %r244 <- AVL_RotateLeft
	phisrc.64*  %phi42(p) <- %r244
	br          .L79

.L85:
	store.32    $0 -> 24[%r238]
	store.32    $0 -> 24[%arg1]
	push.64*    %arg1
	call.64*    %r248 <- AVL_RotateLeft
	phisrc.64*  %phi43(p) <- %r248
	br          .L79

.L86:
	push.64*    %arg1
	call.64*    %r250 <- AVL_DoubleRotateLeft
	phisrc.64*  %phi44(p) <- %r250
	br          .L79

.L79:
	phi.64*     %r251 <- %phi40(p), %phi41(p), %phi42(p), %phi43(p), %phi44(p), %phi45(p), %phi46(p)
	ret.64*     %r251


AVL_RebalanceShorterRight:
.L88:
	<entry-point>
	load.32     %r255 <- 24[%arg1]
	phisrc.64*  %phi60(p) <- %arg1
	switch      %r255, 0 -> .L90, 1 -> .L92, 2 -> .L91, default -> .L89

.L90:
	store.32    $1 -> 24[%arg1]
	store.32    $0 -> 0[%arg2]
	phisrc.64*  %phi54(p) <- %arg1
	br          .L89

.L91:
	store.32    $0 -> 24[%arg1]
	phisrc.64*  %phi55(p) <- %arg1
	br          .L89

.L92:
	load.64*    %r260 <- 8[%arg1]
	load.32     %r262 <- 24[%r260]
	phisrc.64*  %phi59(p) <- %arg1
	switch      %r262, 0 -> .L94, 1 -> .L95, 2 -> .L96, default -> .L89

.L94:
	store.32    $0 -> 0[%arg2]
	store.32    $2 -> 24[%r260]
	push.64*    %arg1
	call.64*    %r266 <- AVL_RotateRight
	phisrc.64*  %phi56(p) <- %r266
	br          .L89

.L95:
	store.32    $0 -> 24[%r260]
	store.32    $0 -> 24[%arg1]
	push.64*    %arg1
	call.64*    %r270 <- AVL_RotateRight
	phisrc.64*  %phi57(p) <- %r270
	br          .L89

.L96:
	push.64*    %arg1
	call.64*    %r272 <- AVL_DoubleRotateRight
	phisrc.64*  %phi58(p) <- %r272
	br          .L89

.L89:
	phi.64*     %r273 <- %phi54(p), %phi55(p), %phi56(p), %phi57(p), %phi58(p), %phi59(p), %phi60(p)
	ret.64*     %r273


AVL_Height:
.L98:
	<entry-point>
	phisrc.32   %phi74(lf_height) <- $0
	phisrc.32   %phi77(rt_height) <- $0
	br          %arg1, .L100, .L99

.L99:
	phisrc.32   %phi67(return) <- $0
	br          .L101

.L100:
	load.64*    %r279 <- 8[%arg1]
	br          %r279, .L102, .L103

.L102:
	push.64*    %r279
	call.32     %r282 <- AVL_Height
	phisrc.32   %phi75(lf_height) <- %r282
	br          .L103

.L103:
	load.64*    %r284 <- 16[%arg1]
	br          %r284, .L104, .L105

.L104:
	push.64*    %r284
	call.32     %r287 <- AVL_Height
	phisrc.32   %phi78(rt_height) <- %r287
	br          .L105

.L105:
	phi.32      %r288(lf_height) <- %phi74(lf_height), %phi75(lf_height)
	phi.32      %r289(rt_height) <- %phi77(rt_height), %phi78(rt_height)
	setgt.32    %r290 <- %r288(lf_height), %r289(rt_height)
	br          %r290, .L106, .L107

.L106:
	add.32      %r292 <- %r288(lf_height), $1
	phisrc.32   %phi69(height) <- %r292
	br          .L108

.L107:
	add.32      %r298 <- %r289(rt_height), $1
	phisrc.32   %phi70(height) <- %r298
	br          .L108

.L108:
	phi.32      %r303 <- %phi69(height), %phi70(height)
	phisrc.32   %phi68(return) <- %r303
	br          .L101

.L101:
	phi.32      %r277 <- %phi67(return), %phi68(return)
	ret.32      %r277


AVLTree_FindFirst:
.L109:
	<entry-point>
	load.64*    %r305 <- 8[%arg1]
	br          %r305, .L110, .L111

.L110:
	ptrcast.64* %r308(current) <- (64) %r305
	phisrc.64*  %phi85(current) <- %r308(current)
	br          .L115

.L115:
	phi.64*     %r309(current) <- %phi85(current), %phi86(current)
	load.64*    %r310 <- 8[%r309(current)]
	br          %r310, .L112, .L114

.L112:
	phisrc.64*  %phi86(current) <- %r310
	br          .L115

.L114:
	add.64*     %r315 <- %r309(current), $32
	cast.64*    %r316 <- (64) %r315
	phisrc.64*  %phi81(return) <- %r316
	br          .L116

.L111:
	phisrc.64*  %phi82(return) <- $0
	br          .L116

.L116:
	phi.64*     %r317 <- %phi81(return), %phi82(return)
	ret.64*     %r317


AVLTree_FindLast:
.L117:
	<entry-point>
	load.64*    %r319 <- 8[%arg1]
	br          %r319, .L118, .L119

.L118:
	ptrcast.64* %r322(current) <- (64) %r319
	phisrc.64*  %phi92(current) <- %r322(current)
	br          .L123

.L123:
	phi.64*     %r323(current) <- %phi92(current), %phi93(current)
	load.64*    %r324 <- 16[%r323(current)]
	br          %r324, .L120, .L122

.L120:
	phisrc.64*  %phi93(current) <- %r324
	br          .L123

.L122:
	add.64*     %r329 <- %r323(current), $32
	cast.64*    %r330 <- (64) %r329
	phisrc.64*  %phi88(return) <- %r330
	br          .L124

.L119:
	phisrc.64*  %phi89(return) <- $0
	br          .L124

.L124:
	phi.64*     %r331 <- %phi88(return), %phi89(return)
	ret.64*     %r331


AVLTree_FindNext:
.L125:
	<entry-point>
	ptrcast.64* %r333 <- (64) %arg2
	phisrc.64*  %phi98(current) <- %r333
	br          %r333, .L126, .L127

.L126:
	add.64*     %r336 <- %r333, $-32
	load.64*    %r338 <- -16[%r333]
	br          %r338, .L128, .L129

.L128:
	phisrc.64*  %phi108(current) <- %r338
	br          .L133

.L133:
	phi.64*     %r341(current) <- %phi108(current), %phi109(current)
	load.64*    %r342 <- 8[%r341(current)]
	phisrc.64*  %phi99(current) <- %r341(current)
	br          %r342, .L130, .L127

.L130:
	phisrc.64*  %phi109(current) <- %r342
	br          .L133

.L129:
	load.64*    %r348(current) <- -32[%r333]
	phisrc.64*  %phi104(current) <- %r348(current)
	phisrc.64*  %phi112(p) <- %r336
	br          .L138

.L138:
	phi.64*     %r349(current) <- %phi104(current), %phi105(current)
	phisrc.64*  %phi100(current) <- %r349(current)
	br          %r349(current), .L135, .L127

.L135:
	load.64*    %r351 <- 16[%r349(current)]
	phi.64*     %r352 <- %phi112(p), %phi113(p)
	seteq.32    %r353 <- %r351, %r352
	phisrc.64*  %phi101(current) <- %r349(current)
	br          %r353, .L139, .L127

.L139:
	load.64*    %r356 <- 0[%r349(current)]
	phisrc.64*  %phi105(current) <- %r356
	phisrc.64*  %phi113(p) <- %r349(current)
	br          .L138

.L127:
	phi.64*     %r357(current) <- %phi98(current), %phi99(current), %phi100(current), %phi101(current)
	br          %r357(current), .L142, .L143

.L142:
	add.64*     %r359 <- %r357(current), $32
	cast.64*    %r360 <- (64) %r359
	phisrc.64*  %phi95(return) <- %r360
	br          .L144

.L143:
	phisrc.64*  %phi96(return) <- $0
	br          .L144

.L144:
	phi.64*     %r361 <- %phi95(return), %phi96(return)
	ret.64*     %r361


AVLTree_FindPrevious:
.L146:
	<entry-point>
	ptrcast.64* %r363 <- (64) %arg2
	phisrc.64*  %phi119(current) <- %r363
	br          %r363, .L147, .L148

.L147:
	add.64*     %r366 <- %r363, $-32
	load.64*    %r368 <- -24[%r363]
	br          %r368, .L149, .L150

.L149:
	phisrc.64*  %phi129(current) <- %r368
	br          .L154

.L154:
	phi.64*     %r371(current) <- %phi129(current), %phi130(current)
	load.64*    %r372 <- 16[%r371(current)]
	phisrc.64*  %phi120(current) <- %r371(current)
	br          %r372, .L151, .L148

.L151:
	phisrc.64*  %phi130(current) <- %r372
	br          .L154

.L150:
	load.64*    %r378(current) <- -32[%r363]
	phisrc.64*  %phi125(current) <- %r378(current)
	phisrc.64*  %phi133(p) <- %r366
	br          .L159

.L159:
	phi.64*     %r379(current) <- %phi125(current), %phi126(current)
	phisrc.64*  %phi121(current) <- %r379(current)
	br          %r379(current), .L156, .L148

.L156:
	load.64*    %r381 <- 8[%r379(current)]
	phi.64*     %r382 <- %phi133(p), %phi134(p)
	seteq.32    %r383 <- %r381, %r382
	phisrc.64*  %phi122(current) <- %r379(current)
	br          %r383, .L160, .L148

.L160:
	load.64*    %r386 <- 0[%r379(current)]
	phisrc.64*  %phi126(current) <- %r386
	phisrc.64*  %phi134(p) <- %r379(current)
	br          .L159

.L148:
	phi.64*     %r387(current) <- %phi119(current), %phi120(current), %phi121(current), %phi122(current)
	br          %r387(current), .L163, .L164

.L163:
	add.64*     %r389 <- %r387(current), $32
	cast.64*    %r390 <- (64) %r389
	phisrc.64*  %phi116(return) <- %r390
	br          .L165

.L164:
	phisrc.64*  %phi117(return) <- $0
	br          .L165

.L165:
	phi.64*     %r391 <- %phi116(return), %phi117(return)
	ret.64*     %r391


AVLTree_Height:
.L167:
	<entry-point>
	load.64*    %r393 <- 8[%arg1]
	ptrcast.64* %r394 <- (64) %r393
	push.64*    %r394
	call.32     %r395 <- AVL_Height
	ret.32      %r395


AVLTree_BackwardApply:
.L169:
	<entry-point>
	br          %arg1, .L171, .L172

.L171:
	load.64*    %r400 <- 16[%arg1]
	push.64*    %r400
	push.64*    %arg2
	call        AVLTree_BackwardApply
	add.64*     %r403 <- %arg1, $32
	cast.64*    %r404 <- (64) %r403
	push.64*    %r404
	call        %arg2
	load.64*    %r407 <- 8[%arg1]
	push.64*    %r407
	push.64*    %arg2
	call        AVLTree_BackwardApply
	br          .L172

.L172:
	ret


AVLTree_Backeach:
.L173:
	<entry-point>
	load.64*    %r410 <- 8[%arg1]
	ptrcast.64* %r411 <- (64) %r410
	push.64*    %r411
	push.64*    %arg2
	call        AVLTree_BackwardApply
	ret


AVLTree_ForwardApply:
.L175:
	<entry-point>
	br          %arg1, .L177, .L178

.L177:
	load.64*    %r416 <- 8[%arg1]
	push.64*    %r416
	push.64*    %arg2
	call        AVLTree_ForwardApply
	add.64*     %r419 <- %arg1, $32
	cast.64*    %r420 <- (64) %r419
	push.64*    %r420
	call        %arg2
	load.64*    %r423 <- 16[%arg1]
	push.64*    %r423
	push.64*    %arg2
	call        AVLTree_ForwardApply
	br          .L178

.L178:
	ret


AVLTree_Foreach:
.L179:
	<entry-point>
	load.64*    %r426 <- 8[%arg1]
	ptrcast.64* %r427 <- (64) %r426
	push.64*    %r427
	push.64*    %arg2
	call        AVLTree_ForwardApply
	ret


AVL_new:
.L181:
	<entry-point>
	load.64*    %r430 <- 0[%arg1]
	load.64*    %r432 <- 24[%arg1]
	push.64*    %r432
	call.64*    %r433 <- alloc_node
	ptrcast.64* %r434 <- (64) %r433
	br          %r434, .L183, .L182

.L182:
	push.32     $0xffffffff
	call        exit
	br          .L183

.L183:
	store.64*   $0 -> 0[%r434]
	store.64*   $0 -> 16[%r434]
	store.64*   $0 -> 8[%r434]
	store.32    $0 -> 24[%r434]
	load.64*    %r442 <- 8[%r430]
	br          %r442, .L184, .L187

.L184:
	add.64*     %r445 <- %r434, $32
	cast.64*    %r446 <- (64) %r445
	push.64*    %r446
	push.64*    %arg2
	call        %r442
	br          .L187

.L187:
	ret.64*     %r434


AVLTree_Insert:
.L188:
	<entry-point>
	load.64*    %r453 <- 8[%arg1]
	ptrcast.64* %r454(n) <- (64) %r453
	load.64*    %r456 <- 0[%arg1]
	br          %r454(n), .L190, .L189

.L189:
	push.64*    %arg1
	push.64*    %arg2
	call.64*    %r461(root) <- AVL_new
	phisrc.64*  %phi142(root) <- %r461(root)
	phisrc.64*  %phi146(found) <- %r461(root)
	br          .L191

.L190:
	store.32    $0 -> 0[height_changed]
	phisrc.64*  %phi143(root) <- %r454(n)
	phisrc.64*  %phi175(n) <- %r454(n)
	br          .L192

.L192:
	phi.64*     %r463(p) <- %phi175(n), %phi176(n), %phi177(n)
	push.64*    %arg2
	add.64*     %r466 <- %r463(p), $32
	cast.64*    %r467 <- (64) %r466
	push.64*    %r467
	load.64*    %r469 <- 0[%r456]
	call.32     %r470 <- %r469
	setlt.32    %r472 <- %r470, $0
	br          %r472, .L195, .L196

.L195:
	load.64*    %r474(n) <- 8[%r463(p)]
	phisrc.64*  %phi172(n) <- %r474(n)
	phisrc.64*  %phi176(n) <- %r474(n)
	br          .L193

.L196:
	setgt.32    %r476 <- %r470, $0
	br          %r476, .L198, .L199

.L198:
	load.64*    %r478 <- 16[%r463(p)]
	phisrc.64*  %phi173(n) <- %r478
	phisrc.64*  %phi177(n) <- %r478
	br          .L193

.L199:
	phisrc.64*  %phi140(return) <- %r467
	br          .L201

.L193:
	phi.64*     %r483 <- %phi172(n), %phi173(n)
	br          %r483, .L192, .L194

.L194:
	push.64*    %arg1
	push.64*    %arg2
	call.64*    %r487(n) <- AVL_new
	push.64*    %arg2
	cast.64*    %r491 <- (64) %r466
	push.64*    %r491
	load.64*    %r493 <- 0[%r456]
	call.32     %r494 <- %r493
	setlt.32    %r495 <- %r494, $0
	phisrc.64*  %phi147(found) <- %r487(n)
	br          %r495, .L202, .L203

.L202:
	push.64*    %r463(p)
	push.64*    %r487(n)
	call        AVL_SetLeft
	phisrc.64*  %phi155(p) <- %r463(p)
	phisrc.64*  %phi164(n) <- %r487(n)
	phisrc.64*  %phi167(n) <- %r487(n)
	br          .L204

.L203:
	push.64*    %r463(p)
	push.64*    %r487(n)
	call        AVL_SetRight
	phisrc.64*  %phi156(p) <- %r463(p)
	phisrc.64*  %phi165(n) <- %r487(n)
	phisrc.64*  %phi168(n) <- %r487(n)
	br          .L204

.L204:
	store.32    $1 -> 0[height_changed]
	phisrc.32   %phi148(height_changed) <- $1
	phisrc.32   %phi179 <- $1
	phisrc.32   %phi180 <- $1
	phisrc.32   %phi181 <- $1
	br          .L208

.L208:
	phi.64*     %r500(p) <- %phi155(p), %phi156(p), %phi157(p)
	setne.32    %r501 <- %r500(p), $0
	load.32     %r502 <- 0[height_changed]
	and-bool.32 %r503 <- %r501, %r502
	br          %r503, .L205, .L207

.L205:
	phi.64*     %r504 <- %phi167(n), %phi168(n), %phi169(n)
	load.64*    %r506 <- 8[%r500(p)]
	seteq.32    %r507 <- %r504, %r506
	symaddr.64* %r509 <- height_changed
	br          %r507, .L209, .L210

.L209:
	push.64*    %r500(p)
	push.64*    %r509
	call.64*    %r510(p) <- AVL_RebalanceHeavierLeft
	phisrc.64*  %phi150(p) <- %r510(p)
	br          .L211

.L210:
	push.64*    %r500(p)
	push.64*    %r509
	call.64*    %r513 <- AVL_RebalanceHeavierRight
	phisrc.64*  %phi151(p) <- %r513
	br          .L211

.L211:
	phi.64*     %r514 <- %phi150(p), %phi151(p)
	load.64*    %r516 <- 0[%r514]
	phisrc.64*  %phi157(p) <- %r516
	phisrc.64*  %phi166(n) <- %r514
	phisrc.64*  %phi169(n) <- %r514
	br          .L208

.L207:
	br          %r500(p), .L191, .L212

.L212:
	phi.64*     %r519 <- %phi164(n), %phi165(n), %phi166(n)
	phisrc.64*  %phi144(root) <- %r519
	br          .L191

.L191:
	phi.64*     %r520 <- %phi142(root), %phi143(root), %phi144(root)
	cast.64*    %r521 <- (64) %r520
	store.64*   %r521 -> 8[%arg1]
	phi.64*     %r523 <- %phi146(found), %phi147(found)
	add.64*     %r524 <- %r523, $32
	cast.64*    %r525 <- (64) %r524
	phisrc.64*  %phi141(return) <- %r525
	br          .L201

.L201:
	phi.64*     %r482 <- %phi140(return), %phi141(return)
	ret.64*     %r482


AVLTree_DeleteObject:
.L214:
	<entry-point>
	ptrcast.64* %r530 <- (64) %arg2
	store.32    $0 -> 0[height_changed]
	load.64*    %r532 <- 0[%arg1]
	phisrc.32   %phi245(flag) <- $0
	br          %r530, .L216, .L215

.L215:
	phisrc.32   %phi182(return) <- $0xffffffff
	br          .L217

.L216:
	add.64*     %r537 <- %r530, $-32
	load.64*    %r539 <- -24[%r530]
	br          %r539, .L218, .L219

.L218:
	phisrc.64*  %phi239(n) <- %r539
	br          .L223

.L223:
	phi.64*     %r544(n) <- %phi239(n), %phi240(n)
	load.64*    %r545 <- 16[%r544(n)]
	br          %r545, .L221, .L222

.L221:
	phisrc.64*  %phi240(n) <- %r545
	br          .L223

.L222:
	load.64*    %r550 <- 16[%r532]
	br          %r550, .L224, .L225

.L224:
	add.64*     %r553 <- %r537, $32
	cast.64*    %r554 <- (64) %r553
	push.64*    %r554
	add.64*     %r556 <- %r544(n), $32
	cast.64*    %r557 <- (64) %r556
	push.64*    %r557
	call        %r550
	br          .L226

.L225:
	load.64*    %r561 <- 24[%r532]
	br          %r561, .L227, .L229

.L227:
	add.64*     %r564 <- %r537, $32
	cast.64*    %r565 <- (64) %r564
	push.64*    %r565
	call        %r561
	br          .L229

.L229:
	add.64*     %r569 <- %r537, $32
	cast.64*    %r570 <- (64) %r569
	push.64*    %r570
	add.64*     %r572 <- %r544(n), $32
	cast.64*    %r573 <- (64) %r572
	push.64*    %r573
	load.32     %r575 <- 20[%arg1]
	push.32     %r575
	call.64*    %r576 <- memcpy
	br          .L226

.L226:
	load.64*    %r578 <- 0[%r544(n)]
	load.64*    %r581 <- 8[%r578]
	seteq.32    %r582 <- %r544(n), %r581
	br          %r582, .L230, .L231

.L230:
	push.64*    %r578
	load.64*    %r585 <- 8[%r544(n)]
	push.64*    %r585
	call        AVL_SetLeft
	phisrc.64*  %phi194(p) <- %r578
	phisrc.32   %phi244(flag) <- $1
	br          .L232

.L231:
	push.64*    %r578
	load.64*    %r588 <- 8[%r544(n)]
	push.64*    %r588
	call        AVL_SetRight
	phisrc.64*  %phi195(p) <- %r578
	br          .L232

.L232:
	phisrc.64*  %phi185(discard) <- %r544(n)
	phisrc.64*  %phi211(n) <- %r544(n)
	phisrc.64*  %phi214(n) <- %r544(n)
	br          .L233

.L219:
	load.64*    %r591 <- -32[%r530]
	br          %r591, .L234, .L235

.L234:
	load.64*    %r596 <- 8[%r591]
	seteq.32    %r597 <- %r537, %r596
	br          %r597, .L236, .L237

.L236:
	push.64*    %r591
	load.64*    %r600 <- -16[%r530]
	push.64*    %r600
	call        AVL_SetLeft
	phisrc.64*  %phi196(p) <- %r591
	phisrc.32   %phi246(flag) <- $1
	br          .L238

.L237:
	push.64*    %r591
	load.64*    %r603 <- -16[%r530]
	push.64*    %r603
	call        AVL_SetRight
	phisrc.64*  %phi197(p) <- %r591
	br          .L238

.L238:
	load.64*    %r605 <- 24[%r532]
	br          %r605, .L239, .L241

.L239:
	add.64*     %r608 <- %r537, $32
	cast.64*    %r609 <- (64) %r608
	push.64*    %r609
	call        %r605
	br          .L241

.L241:
	phisrc.64*  %phi186(discard) <- %r537
	phisrc.64*  %phi212(n) <- %r537
	phisrc.64*  %phi215(n) <- %r537
	br          .L233

.L235:
	load.64*    %r614 <- -16[%r530]
	br          %r614, .L243, .L244

.L243:
	store.64*   $0 -> 0[%r614]
	br          .L244

.L244:
	load.64*    %r619 <- 24[%r532]
	br          %r619, .L245, .L247

.L245:
	add.64*     %r622 <- %r537, $32
	cast.64*    %r623 <- (64) %r622
	push.64*    %r623
	call        %r619
	br          .L247

.L247:
	load.64*    %r627 <- 24[%arg1]
	push.64*    %r627
	cast.64*    %r629 <- (64) %r537
	push.64*    %r629
	call        dealloc_node
	cast.64*    %r631 <- (64) %r614
	store.64*   %r631 -> 8[%arg1]
	phisrc.32   %phi183(return) <- $0
	br          .L217

.L233:
	store.32    $1 -> 0[height_changed]
	phisrc.32   %phi243(height_changed) <- $1
	phisrc.32   %phi248(flag) <- $1
	phisrc.32   %phi255(flag) <- $1
	phisrc.32   %phi256(flag) <- $1
	br          .L251

.L251:
	phi.64*     %r633(p) <- %phi194(p), %phi195(p), %phi196(p), %phi197(p), %phi198(p)
	setne.32    %r634 <- %r633(p), $0
	load.32     %r635 <- 0[height_changed]
	and-bool.32 %r636 <- %r634, %r635
	br          %r636, .L248, .L250

.L248:
	phi.32      %r637 <- %phi244(flag), %phi245(flag), %phi246(flag), %phi247(flag)
	br          %r637, .L252, .L254

.L254:
	phi.64*     %r638 <- %phi214(n), %phi215(n), %phi216(n)
	load.64*    %r640 <- 8[%r633(p)]
	seteq.32    %r641 <- %r638, %r640
	br          %r641, .L252, .L253

.L252:
	push.64*    %r633(p)
	symaddr.64* %r643 <- height_changed
	push.64*    %r643
	call.64*    %r644(p) <- AVL_RebalanceShorterLeft
	phisrc.64*  %phi188(p) <- %r644(p)
	phisrc.32   %phi247(flag) <- $0
	br          .L255

.L253:
	push.64*    %r633(p)
	symaddr.64* %r646 <- height_changed
	push.64*    %r646
	call.64*    %r647 <- AVL_RebalanceShorterRight
	phisrc.64*  %phi189(p) <- %r647
	br          .L255

.L255:
	phi.64*     %r648 <- %phi188(p), %phi189(p)
	load.64*    %r650 <- 0[%r648]
	phisrc.64*  %phi198(p) <- %r650
	phisrc.64*  %phi213(n) <- %r648
	phisrc.64*  %phi216(n) <- %r648
	br          .L251

.L250:
	br          %r633(p), .L257, .L256

.L256:
	phi.64*     %r653 <- %phi211(n), %phi212(n), %phi213(n)
	cast.64*    %r654 <- (64) %r653
	store.64*   %r654 -> 8[%arg1]
	br          .L257

.L257:
	load.64*    %r657 <- 24[%arg1]
	push.64*    %r657
	phi.64*     %r658 <- %phi185(discard), %phi186(discard)
	cast.64*    %r659 <- (64) %r658
	push.64*    %r659
	call        dealloc_node
	phisrc.32   %phi184(return) <- $0
	br          .L217

.L217:
	phi.32      %r535 <- %phi182(return), %phi183(return), %phi184(return)
	ret.32      %r535


AVLTree_Delete:
.L258:
	<entry-point>
	load.64*    %r661 <- 8[%arg1]
	ptrcast.64* %r662(n) <- (64) %r661
	load.64*    %r664 <- 0[%arg1]
	br          %r662(n), .L260, .L259

.L259:
	phisrc.32   %phi257(return) <- $0xffffffff
	br          .L261

.L260:
	phisrc.64*  %phi266(n) <- %r662(n)
	br          .L265

.L265:
	phi.64*     %r669(n) <- %phi266(n), %phi267(n), %phi268(n)
	br          %r669(n), .L262, .L272

.L262:
	push.64*    %arg2
	add.64*     %r673 <- %r669(n), $32
	cast.64*    %r674 <- (64) %r673
	push.64*    %r674
	load.64*    %r676 <- 0[%r664]
	call.32     %r677 <- %r676
	setlt.32    %r679 <- %r677, $0
	br          %r679, .L266, .L267

.L266:
	load.64*    %r681 <- 8[%r669(n)]
	phisrc.64*  %phi267(n) <- %r681
	br          .L265

.L267:
	setgt.32    %r683 <- %r677, $0
	br          %r683, .L269, .L264

.L269:
	load.64*    %r685 <- 16[%r669(n)]
	phisrc.64*  %phi268(n) <- %r685
	br          .L265

.L264:
	br          %r669(n), .L273, .L272

.L272:
	phisrc.32   %phi258(return) <- $0xffffffff
	br          .L261

.L273:
	push.64*    %arg1
	push.64*    %r674
	call.32     %r692 <- AVLTree_DeleteObject
	phisrc.32   %phi259(return) <- $0
	br          .L261

.L261:
	phi.32      %r667 <- %phi257(return), %phi258(return), %phi259(return)
	ret.32      %r667


AVLTree_Search:
.L274:
	<entry-point>
	load.64*    %r694 <- 8[%arg1]
	ptrcast.64* %r695(current) <- (64) %r694
	load.64*    %r697 <- 0[%arg1]
	br          %r695(current), .L275, .L276

.L275:
	phisrc.64*  %phi275(current) <- %r695(current)
	br          .L280

.L280:
	phi.64*     %r700(current) <- %phi275(current), %phi276(current), %phi277(current)
	br          %r700(current), .L277, .L276

.L277:
	push.64*    %arg2
	add.64*     %r703 <- %r700(current), $32
	cast.64*    %r704 <- (64) %r703
	push.64*    %r704
	load.64*    %r706 <- 0[%r697]
	call.32     %r707 <- %r706
	br          %r707, .L282, .L281

.L281:
	phisrc.64*  %phi269(return) <- %r704
	br          .L283

.L282:
	setlt.32    %r715 <- %r707, $0
	br          %r715, .L285, .L286

.L285:
	load.64*    %r717 <- 8[%r700(current)]
	phisrc.64*  %phi276(current) <- %r717
	br          .L280

.L286:
	load.64*    %r719 <- 16[%r700(current)]
	phisrc.64*  %phi277(current) <- %r719
	br          .L280

.L276:
	phisrc.64*  %phi270(return) <- $0
	br          .L283

.L283:
	phi.64*     %r713 <- %phi269(return), %phi270(return)
	ret.64*     %r713


AVLTree_New:
.L288:
	<entry-point>
	store.64*   $0 -> 8[%arg1]
	store.64*   %arg2 -> 0[%arg1]
	store.32    %arg3 -> 20[%arg1]
	store.32    $0 -> 16[%arg1]
	scast.64    %r727 <- (32) %arg3
	add.64      %r728 <- %r727, $32
	cast.32     %r729 <- (64) %r728
	push.32     %r729
	push.32     %arg4
	call.64*    %r731 <- new_allocator
	store.64*   %r731 -> 24[%arg1]
	ret.64*     %arg1


AVLTree_Destroy:
.L290:
	<entry-point>
	load.64*    %r736 <- 0[%arg1]
	load.64*    %r737 <- 24[%r736]
	br          %r737, .L291, .L292

.L291:
	load.64*    %r740 <- 8[%arg1]
	ptrcast.64* %r741 <- (64) %r740
	push.64*    %r741
	push.64*    %r737
	call        AVLTree_ForwardApply
	br          .L292

.L292:
	load.64*    %r746 <- 24[%arg1]
	push.64*    %r746
	call        destroy_allocator
	ret


comparekeys:
.L294:
	<entry-point>
	ptrcast.64* %r748 <- (64) %arg1
	ptrcast.64* %r750 <- (64) %arg2
	load.32     %r752 <- 0[%r748]
	load.32     %r754 <- 0[%r750]
	sub.32      %r755 <- %r752, %r754
	ret.32      %r755


createobject:
.L296:
	<entry-point>
	ptrcast.64* %r758 <- (64) %arg2
	ptrcast.64* %r760 <- (64) %arg1
	load.32     %r762 <- 0[%r758]
	store.32    %r762 -> 0[%r760]
	ret


destroyobject:
.L298:
	<entry-point>
	ret


assignobject:
.L300:
	<entry-point>
	ptrcast.64* %r765 <- (64) %arg1
	ptrcast.64* %r767 <- (64) %arg2
	load.32     %r769 <- 0[%r767]
	store.32    %r769 -> 0[%r765]
	ret


main:
.L302:
	<entry-point>
	store.32    $0 -> 0[once]
	store.32    $97 -> 0[testdata]
	store.32    $103 -> 4[testdata]
	store.32    $113 -> 8[testdata]
	store.32    $119 -> 12[testdata]
	store.32    $101 -> 16[testdata]
	store.32    $102 -> 20[testdata]
	store.32    $98 -> 24[testdata]
	store.32    $120 -> 28[testdata]
	store.32    $107 -> 32[testdata]
	store.32    $108 -> 36[testdata]
	store.32    $112 -> 40[testdata]
	store.32    $109 -> 44[testdata]
	store.32    $115 -> 48[testdata]
	store.32    $121 -> 52[testdata]
	store.32    $116 -> 56[testdata]
	store.32    $117 -> 60[testdata]
	store.32    $111 -> 64[testdata]
	store.32    $114 -> 68[testdata]
	store.32    $106 -> 72[testdata]
	store.32    $48 -> 76[testdata]
	symaddr.64* %r771 <- comparekeys
	store.64*   %r771 -> 0[vtable]
	symaddr.64* %r772 <- createobject
	store.64*   %r772 -> 8[vtable]
	symaddr.64* %r773 <- destroyobject
	store.64*   %r773 -> 24[vtable]
	symaddr.64* %r774 <- assignobject
	store.64*   %r774 -> 16[vtable]
	symaddr.64* %r775 <- tree
	push.64*    %r775
	symaddr.64* %r776 <- vtable
	push.64*    %r776
	push.32     $4
	push.32     $1000
	call.64*    %r777 <- AVLTree_New
	phisrc.32   %phi285(i) <- $0
	br          .L306

.L306:
	phi.32      %r778(i) <- %phi285(i), %phi286(i)
	setlt.32    %r779 <- %r778(i), $20
	br          %r779, .L303, .L305

.L303:
	symaddr.64* %r780 <- testdata
	scast.64    %r782 <- (32) %r778(i)
	muls.64     %r783 <- %r782, $4
	add.64*     %r784 <- %r780, %r783
	load.32     %r785 <- 0[%r784]
	store.32    %r785 -> 0[key]
	push.64*    %r775
	symaddr.64* %r787 <- key
	cast.64*    %r788 <- (64) %r787
	push.64*    %r788
	call.64*    %r789 <- AVLTree_Insert
	add.32      %r791 <- %r778(i), $1
	phisrc.32   %phi286(i) <- %r791
	br          .L306

.L305:
	push.64*    %r775
	call.64*    %r793 <- AVLTree_FindFirst
	ptrcast.64* %r794(rec) <- (64) %r793
	phisrc.64*  %phi288(rec) <- %r794(rec)
	br          .L310

.L310:
	phi.64*     %r795(rec) <- %phi288(rec), %phi289(rec)
	br          %r795(rec), .L307, .L309

.L307:
	symaddr.64* %r797 <- <anon symbol:000001BC69DFE128>
	push.64*    %r797
	load.32     %r799 <- 0[%r795(rec)]
	push.32     %r799
	call.32     %r800 <- printf
	push.64*    %r775
	cast.64*    %r803 <- (64) %r795(rec)
	push.64*    %r803
	call.64*    %r804 <- AVLTree_FindNext
	ptrcast.64* %r805 <- (64) %r804
	phisrc.64*  %phi289(rec) <- %r805
	br          .L310

.L309:
	push.64*    %r775
	call        AVLTree_Destroy
	ret.32      $0


